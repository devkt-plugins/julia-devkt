/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.ice1000.julia.devkt.lang;

import org.jetbrains.kotlin.com.intellij.lexer.FlexLexer;
import org.jetbrains.kotlin.com.intellij.psi.tree.IElementType;
import org.jetbrains.kotlin.com.intellij.psi.TokenType;
import org.jetbrains.kotlin.com.intellij.util.containers.*;
import org.ice1000.julia.devkt.lang.psi.JuliaTypes;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/ice1000/git-repos/julia-intellij/grammar/julia-lexer.flex</tt>
 */
class JuliaLexer implements FlexLexer {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;

  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;
  public static final int NESTED_COMMENT = 2;
  public static final int STRING_TEMPLATE = 4;
  public static final int RAW_STRING_TEMPLATE = 6;
  public static final int SHORT_TEMPLATE = 8;
  public static final int LONG_TEMPLATE = 10;
  public static final int CMD_STRING_TEMPLATE = 12;
  public static final int INSIDE_REGEX = 14;
  public static final int INSIDE_RAW_STR = 16;
  public static final int INSIDE_BYTE_ARRAY = 18;
  public static final int INSIDE_VERSION = 20;
  public static final int AFTER_SIMPLE_LIT = 22;
  public static final int AFTER_COLON = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
    8, 8, 9, 9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 6208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 11] << 6) | ((ch >> 5) & 0x3f)] << 5) | (ch & 0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\16\6\1\7\1\10\11\6\1\11\1\12\1\6\1\13\1\14\11\6\1" +
      "\15\14\6\1\16\2\6\1\17\u01e2\6");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6\53\7\1\10\3\7\1\11\6\7\1\10\14\7\1\12\3\7" +
      "\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1" +
      "\12\2\7\1\11\3\7\1\11\2\7\1\10\10\7\1\10\1\7\1\11\72\7\1\10\1\11\11\7\1\12" +
      "\3\7\1\11\5\7\1\13\5\7\1\11\2\7\1\11\4\7\1\13\47\7\1\14\1\7\1\15\1\16\1\17" +
      "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\25\7\1\31\20\7\1\32\1\33\10" +
      "\7\1\34\1\35\1\36\1\37\1\7\1\40\1\41\1\42\1\43\1\44\1\45\1\46\2\47\1\50\1" +
      "\51\1\7\1\52\1\53\226\7\1\10\24\7\1\11\1\7\1\10\5\7\2\11\2\7\1\11\14\7\1\11" +
      "\130\7\1\11\6\7\1\54\45\7\1\10\35\7\1\12\3\7\1\11\1\7\1\55\4\7\1\11\10\7\1" +
      "\11\12\7\1\11\3\7\1\11\13\7\1\11\3\7\1\10\2\7\1\11\15\7\1\10\32\7\1\11\60" +
      "\7\1\10\6\7\1\11\143\7\1\56\1\57\12\7\1\11\65\7");

  /* The ZZ_CMAP_A table has 1536 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\25\1\26\1\10\1\25\2\26\22\25\1\6\1\15\1\12\1\7\1\13\1\113\1\106\1\24\1" +
      "\14\1\51\1\117\1\120\1\102\1\31\1\43\1\114\1\35\1\42\1\131\1\130\2\40\1\127" +
      "\1\40\2\27\1\100\1\101\1\104\1\11\1\105\1\103\1\52\1\34\1\41\2\34\2\33\2\16" +
      "\1\126\4\16\1\132\1\37\1\32\7\16\1\36\2\16\1\45\1\21\1\46\1\116\1\30\1\133" +
      "\1\54\1\57\1\66\1\62\1\60\1\71\1\75\1\64\1\70\1\16\1\63\1\72\1\74\1\61\1\65" +
      "\1\44\1\77\1\53\1\73\1\67\1\22\1\56\1\55\1\23\1\76\1\16\1\47\1\107\1\50\1" +
      "\110\1\25\61\0\1\2\45\0\1\115\10\0\40\16\12\20\46\16\12\20\14\16\12\20\20" +
      "\16\12\20\6\16\12\20\21\16\1\3\44\16\1\5\1\4\1\5\1\4\1\5\5\16\5\5\1\16\1\5" +
      "\1\16\3\5\1\16\1\5\2\16\4\5\1\16\1\5\15\16\2\5\2\16\2\5\2\16\1\5\1\16\2\5" +
      "\1\16\1\5\1\16\6\5\1\16\1\5\1\16\1\5\5\16\4\5\2\16\1\5\1\16\1\5\21\16\1\5" +
      "\1\4\12\5\10\16\1\125\5\1\5\16\2\17\2\16\3\3\3\16\1\1\6\16\1\3\2\1\1\3\1\17" +
      "\1\3\1\17\14\16\1\1\1\17\1\16\2\1\1\16\2\1\1\16\1\3\1\1\1\17\14\1\1\17\20" +
      "\1\1\121\1\111\1\112\1\1\1\123\1\122\46\1\1\16\1\3\1\17\4\1\1\3\3\17\5\3\1" +
      "\1\1\16\2\17\2\3\2\1\5\16\1\1\2\16\1\1\1\16\1\1\1\16\10\1\3\16\1\124\1\3\1" +
      "\17\6\16\1\3\1\16\2\3\1\16\4\3\1\1\1\17\1\3\2\1\1\3\1\17\1\16\31\1\4\16\16" +
      "\1\27\16\1\3\12\16\1\1\5\16\2\1\7\16\1\3\1\1\2\16\3\3\30\16\2\4\3\16\3\5\1" +
      "\16\17\5\4\4\6\5\2\4\5\5\4\16\4\5\43\16\5\5\1\4\2\5\2\4\1\5\1\4\1\5\1\4\2" +
      "\5\2\4\2\5\2\4\2\5\2\4\2\5\2\4\1\5\1\4\1\5\1\4\10\5\2\4\1\5\46\16\1\1\1\3" +
      "\3\16\1\3\1\16\2\3\2\1\37\16\1\1\1\16\3\1\16\16\1\5\1\16\2\3\2\16\2\17\13" +
      "\16\1\3\1\17\24\16\1\3\4\16\15\17\1\16\11\3\2\17\3\3\2\16\1\3\2\17\2\3\1\17" +
      "\4\16\1\17\1\3\1\17\2\3\2\17\1\3\1\17\1\3\1\17\1\3\2\17\1\3\1\16\1\3\1\17" +
      "\1\3\1\17\3\3\3\17\2\16\2\1\2\16\120\1\1\16\1\3\33\16\4\1\25\16\25\5\2\16" +
      "\6\5\34\16\1\5\1\4\1\5\1\4\51\16\12\20\16\16\62\20");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
      "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
      "\1\3\1\16\1\17\1\16\1\20\1\21\1\22\1\21" +
      "\1\23\1\16\1\24\1\25\1\26\1\27\1\30\1\1" +
      "\20\16\1\31\1\32\1\33\1\34\1\35\1\36\1\37" +
      "\1\40\1\41\1\42\1\43\1\44\2\45\1\46\1\47" +
      "\1\50\1\51\1\52\1\53\1\54\1\55\2\16\1\56" +
      "\1\57\2\1\1\60\1\61\1\62\1\1\1\60\1\1" +
      "\1\63\1\64\1\65\1\60\1\66\1\60\1\67\1\70" +
      "\1\60\1\71\1\72\1\73\1\74\1\73\1\16\2\75" +
      "\1\76\1\77\1\100\1\0\1\101\1\51\2\16\1\102" +
      "\1\103\1\104\2\16\4\0\1\105\1\106\1\107\4\0" +
      "\1\2\1\4\1\5\1\6\1\110\1\54\1\102\1\20" +
      "\1\22\1\111\1\35\1\37\1\40\1\42\1\43\1\51" +
      "\1\52\1\53\1\55\1\16\1\112\1\113\4\16\1\114" +
      "\1\115\6\16\1\116\4\16\1\117\1\120\15\16\1\121" +
      "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131" +
      "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141" +
      "\2\16\2\0\1\142\1\143\1\144\3\145\2\0\1\146" +
      "\1\147\2\0\1\150\2\16\1\151\1\0\1\21\1\106" +
      "\1\0\3\21\1\0\1\152\12\16\1\153\4\16\1\154" +
      "\5\16\1\155\1\16\1\156\7\16\1\157\1\160\1\161" +
      "\1\162\1\163\3\0\1\164\1\102\1\0\2\16\1\163" +
      "\1\0\2\21\1\0\1\16\1\165\10\16\1\166\3\16" +
      "\1\167\1\170\14\16\1\171\2\16\1\0\1\172\1\173" +
      "\1\174\2\0\1\21\1\0\2\21\2\0\3\16\1\175" +
      "\1\176\1\177\1\16\1\200\2\16\1\201\1\16\1\202" +
      "\4\16\1\203\1\16\1\204\2\16\1\205\2\16\1\206" +
      "\2\163\1\21\1\0\1\16\1\207\2\16\1\210\1\211" +
      "\2\16\1\212\3\16\1\213\1\16\1\214\1\215\3\0" +
      "\10\16\1\216\1\217\4\0\1\16\1\220\1\16\1\221" +
      "\3\16\1\222\1\0\1\223\1\16\1\224\1\225\1\226" +
      "\1\227";

  private static int[] zzUnpackAction() {
    int[] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\134\0\270\0\u0114\0\u0170\0\u01cc\0\u0228\0\u0284" +
      "\0\u02e0\0\u033c\0\u0398\0\u03f4\0\u0450\0\u04ac\0\u0508\0\u04ac" +
      "\0\u0508\0\u0508\0\u0508\0\u04ac\0\u0564\0\u05c0\0\u061c\0\u0678" +
      "\0\u06d4\0\u04ac\0\u0730\0\u0508\0\u0508\0\u078c\0\u07e8\0\u0844" +
      "\0\u08a0\0\u08fc\0\u0958\0\u09b4\0\u0a10\0\u0a6c\0\u04ac\0\u04ac" +
      "\0\u04ac\0\u04ac\0\u04ac\0\u0ac8\0\u0b24\0\u0b80\0\u0bdc\0\u0c38" +
      "\0\u0c94\0\u0cf0\0\u0d4c\0\u0da8\0\u0e04\0\u0e60\0\u0ebc\0\u0f18" +
      "\0\u0f74\0\u0fd0\0\u102c\0\u1088\0\u10e4\0\u04ac\0\u04ac\0\u04ac" +
      "\0\u1140\0\u119c\0\u11f8\0\u1254\0\u04ac\0\u0508\0\u0508\0\u12b0" +
      "\0\u130c\0\u1368\0\u13c4\0\u1420\0\u147c\0\u0508\0\u0508\0\u0508" +
      "\0\u14d8\0\u0508\0\u1534\0\u1590\0\u04ac\0\u15ec\0\u1648\0\u16a4" +
      "\0\u1700\0\u04ac\0\u175c\0\u17b8\0\u1814\0\u1870\0\u18cc\0\u04ac" +
      "\0\u04ac\0\u1928\0\u04ac\0\u1984\0\u04ac\0\u04ac\0\u19e0\0\u04ac" +
      "\0\u04ac\0\u04ac\0\u04ac\0\u1a3c\0\u1a98\0\u1af4\0\u04ac\0\u04ac" +
      "\0\u1b50\0\u04ac\0\u1bac\0\u04ac\0\u1c08\0\u1c64\0\u1cc0\0\u1d1c" +
      "\0\u04ac\0\u1d78\0\u1dd4\0\u1e30\0\u1e8c\0\u1ee8\0\u1f44\0\u1fa0" +
      "\0\u04ac\0\u1ffc\0\u04ac\0\u2058\0\u20b4\0\u2110\0\u216c\0\u04ac" +
      "\0\u04ac\0\u04ac\0\u04ac\0\u21c8\0\u06d4\0\u2224\0\u04ac\0\u2280" +
      "\0\u22dc\0\u2338\0\u2394\0\u23f0\0\u04ac\0\u04ac\0\u04ac\0\u04ac" +
      "\0\u04ac\0\u04ac\0\u244c\0\u24a8\0\u04ac\0\u2504\0\u2560\0\u25bc" +
      "\0\u2618\0\u04ac\0\u04ac\0\u2674\0\u26d0\0\u272c\0\u2788\0\u27e4" +
      "\0\u2840\0\u0508\0\u289c\0\u28f8\0\u2954\0\u29b0\0\u0508\0\u0508" +
      "\0\u2a0c\0\u2a68\0\u2ac4\0\u2b20\0\u2b7c\0\u2bd8\0\u2c34\0\u2c90" +
      "\0\u2cec\0\u2d48\0\u2da4\0\u2e00\0\u2e5c\0\u04ac\0\u04ac\0\u04ac" +
      "\0\u2eb8\0\u04ac\0\u2f14\0\u04ac\0\u04ac\0\u04ac\0\u04ac\0\u04ac" +
      "\0\u04ac\0\u04ac\0\u2f70\0\u04ac\0\u04ac\0\u04ac\0\u2fcc\0\u3028" +
      "\0\u3084\0\u30e0\0\u04ac\0\u313c\0\u04ac\0\u04ac\0\u3198\0\u31f4" +
      "\0\u3250\0\u32ac\0\u04ac\0\u04ac\0\u3308\0\u3364\0\u04ac\0\u33c0" +
      "\0\u341c\0\u04ac\0\u3478\0\u3308\0\u04ac\0\u34d4\0\u3530\0\u2110" +
      "\0\u216c\0\u358c\0\u04ac\0\u35e8\0\u3644\0\u36a0\0\u36fc\0\u3758" +
      "\0\u37b4\0\u3810\0\u386c\0\u38c8\0\u3924\0\u0508\0\u3980\0\u39dc" +
      "\0\u3a38\0\u3a94\0\u0508\0\u3af0\0\u3b4c\0\u3ba8\0\u3c04\0\u3c60" +
      "\0\u0508\0\u3cbc\0\u0508\0\u3d18\0\u3d74\0\u3dd0\0\u3e2c\0\u3e88" +
      "\0\u3ee4\0\u3f40\0\u04ac\0\u04ac\0\u3f9c\0\u04ac\0\u3ff8\0\u4054" +
      "\0\u40b0\0\u410c\0\u04ac\0\u4168\0\u4168\0\u41c4\0\u4220\0\u427c" +
      "\0\u42d8\0\u4334\0\u4390\0\u43ec\0\u4448\0\u04ac\0\u44a4\0\u4500" +
      "\0\u455c\0\u45b8\0\u4614\0\u4670\0\u46cc\0\u4728\0\u4784\0\u47e0" +
      "\0\u483c\0\u4898\0\u0508\0\u48f4\0\u4950\0\u49ac\0\u4a08\0\u4a64" +
      "\0\u4ac0\0\u4b1c\0\u4b78\0\u4bd4\0\u4c30\0\u4c8c\0\u4ce8\0\u4d44" +
      "\0\u04ac\0\u4da0\0\u4dfc\0\u31f4\0\u04ac\0\u0508\0\u0508\0\u4e58" +
      "\0\u4eb4\0\u4f10\0\u4f6c\0\u4fc8\0\u5024\0\u5080\0\u50dc\0\u5138" +
      "\0\u5194\0\u51f0\0\u0508\0\u0508\0\u0508\0\u524c\0\u0508\0\u52a8" +
      "\0\u5304\0\u0508\0\u5360\0\u0508\0\u53bc\0\u5418\0\u5474\0\u54d0" +
      "\0\u0508\0\u552c\0\u0508\0\u5588\0\u55e4\0\u0508\0\u5640\0\u569c" +
      "\0\u0508\0\u0508\0\u04ac\0\u56f8\0\u5754\0\u57b0\0\u0508\0\u580c" +
      "\0\u5868\0\u0508\0\u0508\0\u58c4\0\u5920\0\u597c\0\u59d8\0\u5a34" +
      "\0\u5a90\0\u0508\0\u5aec\0\u0508\0\u0508\0\u5b48\0\u5ba4\0\u5c00" +
      "\0\u5c5c\0\u5cb8\0\u5d14\0\u5d70\0\u5dcc\0\u5e28\0\u5e84\0\u5ee0" +
      "\0\u0508\0\u0508\0\u5f3c\0\u5f98\0\u5ff4\0\u6050\0\u60ac\0\u0508" +
      "\0\u6108\0\u0508\0\u6164\0\u61c0\0\u621c\0\u0508\0\u6278\0\u0508" +
      "\0\u62d4\0\u0508\0\u0508\0\u0508\0\u0508";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
      "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
      "\1\36\1\37\1\40\1\34\1\41\1\16\1\24\1\42" +
      "\1\34\1\43\3\34\1\44\2\34\1\42\1\34\1\42" +
      "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
      "\1\55\1\56\1\57\1\60\1\61\1\62\1\34\1\63" +
      "\3\34\1\64\1\65\1\66\1\67\1\70\1\71\1\72" +
      "\1\73\1\34\1\74\1\75\1\76\1\77\1\100\1\101" +
      "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111" +
      "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121" +
      "\1\122\1\123\3\42\1\124\1\125\7\126\1\127\1\126" +
      "\1\130\122\126\12\131\1\132\1\133\5\131\1\134\112\131" +
      "\12\135\1\136\1\133\5\135\1\134\112\135\1\16\1\137" +
      "\1\16\3\137\10\16\3\137\1\16\2\137\4\16\1\137" +
      "\1\16\3\137\1\16\2\137\1\16\1\137\2\16\1\137" +
      "\6\16\25\137\11\16\2\137\6\16\6\137\3\16\1\137" +
      "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
      "\1\26\1\27\1\30\1\31\1\140\1\33\1\34\1\35" +
      "\1\36\1\37\1\40\1\34\1\41\1\16\1\24\1\42" +
      "\1\34\1\43\3\34\1\44\2\34\1\42\1\34\1\42" +
      "\1\45\1\46\1\47\1\50\1\51\1\52\1\141\1\54" +
      "\1\55\1\56\1\57\1\60\1\61\1\62\1\34\1\63" +
      "\3\34\1\64\1\65\1\66\1\67\1\70\1\71\1\72" +
      "\1\73\1\34\1\74\1\75\1\76\1\77\1\100\1\101" +
      "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111" +
      "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121" +
      "\1\122\1\123\3\42\1\124\1\125\13\142\1\133\5\142" +
      "\1\134\111\142\1\143\12\144\1\145\133\144\1\146\121\144" +
      "\12\147\1\150\6\147\1\134\112\147\12\144\1\151\121\144" +
      "\1\152\1\153\1\152\3\153\1\152\1\154\2\152\1\153" +
      "\3\152\3\153\1\152\3\153\3\152\1\153\1\152\3\153" +
      "\1\152\2\153\1\152\1\153\2\152\1\153\6\152\25\153" +
      "\11\152\2\153\6\152\6\153\3\152\1\153\2\152\1\137" +
      "\1\152\3\137\10\152\3\137\1\152\2\137\4\152\1\137" +
      "\1\152\3\137\1\152\2\137\1\152\1\137\2\152\1\137" +
      "\6\152\25\137\11\152\2\137\6\152\6\137\3\152\1\137" +
      "\1\152\135\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\25\34\11\0\2\34\6\0\12\34\1\0\10\156" +
      "\1\157\1\160\122\156\10\0\1\26\134\0\1\161\73\0" +
      "\1\162\40\0\1\163\132\0\1\164\133\0\1\165\123\0" +
      "\1\34\1\0\3\34\7\0\1\155\2\34\1\36\1\0" +
      "\2\34\3\0\1\36\1\166\1\0\1\34\1\167\1\34" +
      "\1\36\2\34\1\36\1\34\1\36\1\170\1\34\6\0" +
      "\5\34\1\167\10\34\1\167\6\34\11\0\2\34\6\0" +
      "\6\34\3\36\1\34\12\0\1\171\7\0\1\172\113\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\6\34" +
      "\1\173\11\34\1\174\4\34\11\0\2\34\6\0\12\34" +
      "\1\0\10\175\1\0\10\175\1\176\2\175\3\0\105\175" +
      "\20\0\1\42\6\0\1\42\1\177\2\0\1\200\1\0" +
      "\1\42\2\0\1\42\1\0\1\42\1\170\14\0\1\200" +
      "\10\0\1\200\35\0\3\42\13\0\1\201\17\0\1\202" +
      "\53\0\1\203\20\0\1\204\25\0\1\42\2\0\1\205" +
      "\3\0\1\42\1\177\2\0\1\200\1\0\1\42\1\205" +
      "\1\206\1\42\1\207\1\42\1\170\13\0\1\207\1\200" +
      "\4\0\1\206\3\0\1\200\35\0\3\42\3\0\1\210" +
      "\1\20\1\211\1\212\1\213\3\0\1\214\1\0\1\215" +
      "\1\0\1\33\1\0\1\20\1\216\1\37\2\0\1\217" +
      "\2\0\1\216\1\0\1\220\3\0\1\216\2\0\1\216" +
      "\1\0\1\216\1\221\40\0\1\222\1\102\1\223\1\224" +
      "\1\0\1\225\1\226\1\110\1\111\1\112\1\113\1\114" +
      "\1\115\1\227\1\230\1\231\1\215\1\232\1\0\3\216" +
      "\3\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\1\233\24\34\11\0\2\34\6\0\12\34\2\0\1\234" +
      "\1\0\3\234\10\0\3\234\1\0\2\234\4\0\1\234" +
      "\1\0\3\234\1\0\2\234\1\0\1\234\2\0\1\234" +
      "\6\0\25\234\11\0\2\234\6\0\6\234\3\0\1\234" +
      "\2\0\1\34\1\0\3\34\4\0\1\235\2\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\1\34\1\236\3\34\1\237\17\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\4\34\1\240\20\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\11\34\1\241\13\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\4\0\1\242\2\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\25\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\4\0\1\243\2\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\1\244\1\245\3\34\1\246\17\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\1\34\1\247\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\6\34\1\250\10\34\1\251" +
      "\5\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\12\34\1\252\12\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\1\34\1\253\10\34\1\254" +
      "\12\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\1\255\22\34\1\256" +
      "\1\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\6\34\1\257\7\34" +
      "\1\260\2\34\1\261\3\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\1\262\1\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\1\34\1\263\10\34\1\264\2\34\1\265\7\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\5\34\1\266\4\34\1\267" +
      "\12\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\14\34\1\270\10\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\1\271\1\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\1\34\1\272\10\34" +
      "\1\273\12\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\17\34\1\274" +
      "\5\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\1\275\1\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\25\34\11\0" +
      "\2\34\6\0\12\34\12\0\1\276\66\0\1\277\44\0" +
      "\1\231\66\0\1\300\3\0\1\301\2\0\1\302\35\0" +
      "\1\230\73\0\1\303\37\0\1\304\74\0\1\305\36\0" +
      "\1\306\73\0\1\307\1\0\1\310\35\0\1\311\133\0" +
      "\1\312\102\0\1\313\30\0\1\312\133\0\1\314\133\0" +
      "\1\315\133\0\1\316\123\0\1\34\1\0\3\34\3\0" +
      "\1\164\3\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\25\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\6\34\1\317\16\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\1\34\1\320\23\34\11\0\2\34\6\0\12\34" +
      "\1\0\7\126\1\321\1\126\1\322\133\126\1\160\131\126" +
      "\1\323\124\126\12\131\2\0\5\131\1\0\112\131\1\0" +
      "\1\324\1\0\3\324\6\0\1\325\1\0\3\324\1\0" +
      "\2\324\4\0\1\324\1\0\3\324\1\0\2\324\1\0" +
      "\1\324\2\0\1\324\6\0\25\324\11\0\2\324\6\0" +
      "\6\324\3\0\1\324\1\0\22\326\1\327\1\330\110\326" +
      "\12\135\1\331\1\0\5\135\1\0\124\135\1\332\121\135" +
      "\1\0\1\137\1\0\3\137\7\0\4\137\1\0\2\137" +
      "\3\0\2\137\1\0\11\137\1\0\1\137\6\0\25\137" +
      "\11\0\2\137\6\0\12\137\1\0\13\142\1\0\5\142" +
      "\1\0\111\142\1\0\12\144\1\0\121\144\12\147\1\0" +
      "\6\147\1\0\112\147\11\0\1\160\123\0\1\34\1\0" +
      "\3\34\3\0\1\333\3\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\25\34" +
      "\11\0\2\34\6\0\12\34\1\0\10\156\1\0\123\156" +
      "\11\0\1\225\134\0\1\334\132\0\1\226\123\0\1\34" +
      "\1\0\3\34\7\0\1\155\2\34\1\36\1\0\2\34" +
      "\3\0\1\36\1\166\1\0\3\34\1\36\2\34\1\36" +
      "\1\34\1\36\1\0\1\34\6\0\25\34\11\0\2\34" +
      "\6\0\6\34\3\36\1\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\335" +
      "\11\34\1\0\1\34\6\0\25\34\11\0\2\34\6\0" +
      "\12\34\21\0\1\216\6\0\1\216\3\0\1\336\1\0" +
      "\1\216\2\0\1\216\1\0\1\216\15\0\1\336\10\0" +
      "\1\336\35\0\3\216\13\0\1\337\123\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\15\34\1\340\7\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\15\34\1\341\7\34\11\0" +
      "\2\34\6\0\12\34\25\0\1\342\107\0\10\343\1\0" +
      "\13\343\3\0\105\343\20\0\1\42\6\0\1\42\1\177" +
      "\4\0\1\42\2\0\1\42\1\0\1\42\64\0\3\42" +
      "\22\0\1\344\6\0\2\344\1\335\3\0\1\344\2\0" +
      "\1\344\1\0\1\344\64\0\3\344\107\0\1\345\107\0" +
      "\1\346\101\0\1\347\3\0\3\347\2\0\3\347\11\0" +
      "\1\347\2\0\2\347\1\0\1\347\3\0\1\347\2\0" +
      "\1\347\35\0\3\347\37\0\1\350\2\0\1\350\1\0" +
      "\1\350\64\0\3\350\37\0\1\351\4\0\1\351\102\0" +
      "\1\161\142\0\1\216\6\0\1\216\1\352\2\0\1\336" +
      "\1\0\1\216\2\0\1\216\1\0\1\216\15\0\1\336" +
      "\10\0\1\336\35\0\3\216\13\0\1\201\165\0\1\353" +
      "\101\0\1\231\72\0\1\301\2\0\1\302\35\0\1\304" +
      "\133\0\1\306\73\0\1\307\27\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\15\34\1\354\7\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\234\1\0\3\234\7\0" +
      "\4\234\1\0\2\234\3\0\2\234\1\0\11\234\1\0" +
      "\1\234\6\0\25\234\11\0\2\234\6\0\12\234\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\2\34" +
      "\1\355\22\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\14\34\1\356" +
      "\10\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\20\34\1\357\4\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\5\34\1\360\7\34\1\361" +
      "\7\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\5\34\1\362\17\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\1\363\24\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\22\34\1\364\2\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\365" +
      "\6\0\25\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\7\34\1\366" +
      "\15\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\20\34\1\367\4\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\14\34\1\370\10\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\6\34\1\371\16\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\1\372\1\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\23\34\1\373\1\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\374\6\0\25\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\375\6\0\21\34" +
      "\1\376\3\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\6\34\1\377" +
      "\16\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\17\34\1\u0100\5\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\1\u0101\24\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\6\34\1\u0102\16\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\14\34\1\u0103\10\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\13\34\1\u0104\11\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\1\u0105" +
      "\24\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\14\34\1\u0106\10\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\13\34\1\u0107\11\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\7\34\1\u0108\15\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\12\34\1\u0109\12\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\12\34\1\u010a\12\34\11\0\2\34\6\0\12\34" +
      "\12\0\1\u010b\133\0\1\u010c\73\0\1\u010d\37\0\1\u010e" +
      "\123\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\16\34\1\u010f\6\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\25\34" +
      "\11\0\2\34\6\0\11\34\1\u010f\1\0\11\126\1\0" +
      "\131\126\1\0\124\126\1\0\1\324\1\0\3\324\7\0" +
      "\4\324\1\0\2\324\3\0\2\324\1\0\11\324\1\0" +
      "\1\324\6\0\25\324\11\0\2\324\6\0\12\324\30\0" +
      "\1\u0110\3\0\3\u0110\2\0\3\u0110\11\0\1\u0110\2\0" +
      "\2\u0110\1\0\1\u0110\3\0\1\u0110\2\0\1\u0110\35\0" +
      "\3\u0110\31\0\1\u0111\3\0\3\u0111\2\0\3\u0111\11\0" +
      "\1\u0111\2\0\2\u0111\1\0\1\u0111\3\0\1\u0111\2\0" +
      "\1\u0111\35\0\3\u0111\2\0\12\135\1\u0112\133\135\1\u0113" +
      "\121\135\20\0\1\344\6\0\2\344\4\0\1\344\2\0" +
      "\1\344\1\0\1\344\64\0\3\344\22\0\1\u0114\6\0" +
      "\2\u0114\1\u0115\3\0\1\u0114\2\0\1\u0114\1\0\1\u0114" +
      "\64\0\3\u0114\3\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\12\34\1\u0116\12\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\6\34\1\u0117\16\34\11\0\2\34\6\0\12\34" +
      "\1\0\10\343\1\0\13\343\1\342\2\0\105\343\71\0" +
      "\1\u0118\71\0\1\347\2\0\1\u0119\1\u011a\1\347\1\u011b" +
      "\2\0\3\347\1\u011c\1\u0119\7\0\1\347\2\0\1\347" +
      "\1\u011a\1\0\1\347\3\0\1\347\2\0\1\u011a\35\0" +
      "\3\347\22\0\1\216\6\0\1\216\1\352\4\0\1\216" +
      "\2\0\1\216\1\0\1\216\64\0\3\216\3\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\21\34\1\u011d" +
      "\3\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\4\0\1\u011e\2\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\25\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\1\u011f\1\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\25\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\14\34\1\u0120\10\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\1\u0121\24\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\17\34" +
      "\1\u0122\5\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\1\34\1\u0123" +
      "\23\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\5\34\1\u0124\17\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\15\34\1\u0125\7\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\12\34\1\u0126\12\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\5\34\1\u0127\17\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\13\34\1\u0128\11\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\14\34\1\u0129\3\34\1\u012a\4\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\5\34\1\u012b\17\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\5\34\1\u012c\17\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\12\34" +
      "\1\u012d\12\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\1\u012e\1\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\25\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\13\34\1\u012f\11\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\20\34\1\u0130\4\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\1\34\1\u0131\23\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\1\34\1\u0132\23\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\1\u0133\1\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\25\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\1\34\1\u0134" +
      "\23\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\1\u0135\24\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\1\u0136\1\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\25\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\4\34\1\u0137\20\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\14\34\1\u0138\10\34\11\0\2\34\6\0\12\34\12\0" +
      "\1\u0139\123\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\10\34\1\u013a\1\0" +
      "\1\34\6\0\25\34\11\0\2\34\6\0\7\34\1\u013b" +
      "\2\34\30\0\1\u013c\3\0\3\u013c\2\0\3\u013c\11\0" +
      "\1\u013c\2\0\2\u013c\1\0\1\u013c\3\0\1\u013c\2\0" +
      "\1\u013c\35\0\3\u013c\31\0\1\u013d\3\0\3\u013d\2\0" +
      "\3\u013d\11\0\1\u013d\2\0\2\u013d\1\0\1\u013d\3\0" +
      "\1\u013d\2\0\1\u013d\35\0\3\u013d\2\0\12\135\1\0" +
      "\121\135\20\0\1\u0114\6\0\2\u0114\4\0\1\u0114\2\0" +
      "\1\u0114\1\0\1\u0114\64\0\3\u0114\3\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\6\34\1\u013e\16\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\22\34\1\u013f\2\34\11\0" +
      "\2\34\6\0\12\34\43\0\1\u0140\65\0\1\u0141\23\0" +
      "\1\u0142\6\0\2\u0142\1\u0143\3\0\1\u0142\2\0\1\u0142" +
      "\1\0\1\u0142\64\0\3\u0142\22\0\1\u0142\6\0\1\u0144" +
      "\1\u0142\1\u0143\1\u0119\1\u011a\1\347\1\u0145\2\0\1\u0144" +
      "\1\347\1\u0144\1\u011c\1\u0119\7\0\1\347\2\0\1\347" +
      "\1\u011a\1\0\1\347\3\0\1\347\2\0\1\u011a\35\0" +
      "\3\u0144\25\0\1\u0146\3\0\1\347\2\0\1\u0119\1\u011a" +
      "\1\347\1\u011b\1\u0146\1\0\3\347\1\u011c\1\u0119\7\0" +
      "\1\347\2\0\1\347\1\u011a\1\0\1\347\3\0\1\347" +
      "\2\0\1\u011a\35\0\3\347\31\0\1\u011c\3\0\3\u011c" +
      "\2\0\3\u011c\1\0\1\u0147\7\0\1\u011c\2\0\2\u011c" +
      "\1\0\1\u011c\3\0\1\u011c\2\0\1\u011c\35\0\3\u011c" +
      "\3\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\15\34\1\u0148\7\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\1\u0149" +
      "\24\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\1\u014a\24\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\5\34\1\u014b\17\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\5\34\1\u014c\17\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\10\34\1\u014d\14\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\21\34\1\u014e\3\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\6\34" +
      "\1\u014f\16\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\1\u0150\24\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\15\34\1\u0151\7\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\11\34\1\u0152\13\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\15\34\1\u0153\7\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\14\34\1\u0154\10\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\1\34\1\u0155\23\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\1\u0156" +
      "\24\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\14\34\1\u0157\10\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\14\34\1\u0158\10\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\5\34\1\u0159\17\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\17\34\1\u015a\5\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\17\34\1\u015b\5\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\13\34\1\u015c\11\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\4\34" +
      "\1\u015d\20\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\12\34\1\u015e" +
      "\12\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\17\34\1\u015f\5\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\1\34\1\u0160\23\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\5\34\1\u0161\17\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\25\34\11\0\2\34\6\0\6\34\1\u0162" +
      "\3\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\25\34\11\0\2\34\6\0\10\34\1\u0162\1\34" +
      "\130\0\1\u0163\135\0\1\u0163\22\0\1\u0142\6\0\2\u0142" +
      "\4\0\1\u0164\2\0\1\u0142\1\0\1\u0142\1\u011c\63\0" +
      "\3\u0142\22\0\1\u0142\6\0\2\u0142\4\0\1\u0142\2\0" +
      "\1\u0142\1\0\1\u0142\64\0\3\u0142\22\0\1\u0142\6\0" +
      "\1\u0144\1\u0142\1\0\1\u0119\1\u011a\1\347\1\u0145\2\0" +
      "\1\u0144\1\347\1\u0144\1\u011c\1\u0119\7\0\1\347\2\0" +
      "\1\347\1\u011a\1\0\1\347\3\0\1\347\2\0\1\u011a" +
      "\35\0\3\u0144\22\0\1\u0142\2\0\1\u0146\3\0\1\u0144" +
      "\1\u0142\1\0\1\u0119\1\u011a\1\347\1\u0145\1\u0146\1\0" +
      "\1\u0144\1\347\1\u0144\1\u011c\1\u0119\7\0\1\347\2\0" +
      "\1\347\1\u011a\1\0\1\347\3\0\1\347\2\0\1\u011a" +
      "\35\0\3\u0144\31\0\1\u0165\3\0\3\u0165\2\0\3\u0165" +
      "\11\0\1\u0165\2\0\2\u0165\1\0\1\u0165\3\0\1\u0165" +
      "\2\0\1\u0165\35\0\3\u0165\22\0\1\216\6\0\1\216" +
      "\5\0\1\216\2\0\1\216\1\0\1\216\64\0\3\216" +
      "\3\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\14\34\1\u0166\10\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\6\34" +
      "\1\u0167\16\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\1\34\1\u0168" +
      "\23\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\12\34\1\u0169\12\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\14\34\1\u016a\10\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\16\34\1\u016b\6\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\6\34\1\u016c\16\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\17\34\1\u016d\5\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\14\34\1\u016e\10\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\1\34" +
      "\1\u016f\23\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\15\34\1\u0170" +
      "\7\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\17\34\1\u0171\5\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\14\34\1\u0172\10\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\17\34\1\u0173\5\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\5\34\1\u0174\17\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\17\34\1\u0175\5\34\11\0\2\34\6\0\12\34" +
      "\21\0\1\u0142\2\0\1\u0146\3\0\2\u0142\4\0\1\u0164" +
      "\1\u0146\1\0\1\u0142\1\0\1\u0142\1\u011c\63\0\3\u0142" +
      "\31\0\1\u0165\2\0\1\u0176\1\u0177\1\u0165\1\u0178\2\0" +
      "\3\u0165\1\u011c\1\u0176\7\0\1\u0165\2\0\1\u0165\1\u0177" +
      "\1\0\1\u0165\3\0\1\u0165\2\0\1\u0177\35\0\3\u0165" +
      "\3\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\15\34\1\u0179\7\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\13\34" +
      "\1\u017a\11\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\7\34\1\u017b" +
      "\15\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\1\u017c\1\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\25\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\15\34\1\u017d\7\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\1\34\1\u017e\23\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\4\34\1\u017f\20\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\2\34\3\0\2\34\1\0\11\34\1\0\1\34\6\0" +
      "\12\34\1\u0180\12\34\11\0\2\34\6\0\12\34\2\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\23\34" +
      "\1\u0181\1\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\5\34\1\u0182" +
      "\17\34\11\0\2\34\6\0\12\34\21\0\1\u0183\6\0" +
      "\2\u0183\1\u0184\3\0\1\u0183\2\0\1\u0183\1\0\1\u0183" +
      "\64\0\3\u0183\22\0\1\u0183\6\0\1\u0185\1\u0183\1\u0184" +
      "\1\u0176\1\u0177\1\u0165\1\u0186\2\0\1\u0185\1\u0165\1\u0185" +
      "\1\u011c\1\u0176\7\0\1\u0165\2\0\1\u0165\1\u0177\1\0" +
      "\1\u0165\3\0\1\u0165\2\0\1\u0177\35\0\3\u0185\25\0" +
      "\1\u0146\3\0\1\u0165\2\0\1\u0176\1\u0177\1\u0165\1\u0178" +
      "\1\u0146\1\0\3\u0165\1\u011c\1\u0176\7\0\1\u0165\2\0" +
      "\1\u0165\1\u0177\1\0\1\u0165\3\0\1\u0165\2\0\1\u0177" +
      "\35\0\3\u0165\3\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\3\34\1\u0187\21\34\11\0\2\34\6\0" +
      "\12\34\2\0\1\34\1\0\3\34\7\0\1\155\3\34" +
      "\1\0\2\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\14\34\1\u0188\10\34\11\0\2\34\6\0\12\34" +
      "\2\0\1\34\1\0\3\34\7\0\1\155\3\34\1\0" +
      "\1\u0189\1\34\3\0\2\34\1\0\11\34\1\0\1\34" +
      "\6\0\25\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\5\34\1\u018a" +
      "\17\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\1\34\1\u018b\23\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\17\34\1\u018c\5\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\17\34\1\u018d\5\34\11\0\2\34" +
      "\6\0\12\34\2\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\6\34\1\u018e\16\34\11\0\2\34\6\0" +
      "\12\34\21\0\1\u0183\6\0\2\u0183\4\0\1\u018f\2\0" +
      "\1\u0183\1\0\1\u0183\1\u011c\63\0\3\u0183\22\0\1\u0183" +
      "\6\0\2\u0183\4\0\1\u0183\2\0\1\u0183\1\0\1\u0183" +
      "\64\0\3\u0183\22\0\1\u0183\6\0\1\u0185\1\u0183\1\0" +
      "\1\u0176\1\u0177\1\u0165\1\u0186\2\0\1\u0185\1\u0165\1\u0185" +
      "\1\u011c\1\u0176\7\0\1\u0165\2\0\1\u0165\1\u0177\1\0" +
      "\1\u0165\3\0\1\u0165\2\0\1\u0177\35\0\3\u0185\22\0" +
      "\1\u0183\2\0\1\u0146\3\0\1\u0185\1\u0183\1\0\1\u0176" +
      "\1\u0177\1\u0165\1\u0186\1\u0146\1\0\1\u0185\1\u0165\1\u0185" +
      "\1\u011c\1\u0176\7\0\1\u0165\2\0\1\u0165\1\u0177\1\0" +
      "\1\u0165\3\0\1\u0165\2\0\1\u0177\35\0\3\u0185\3\0" +
      "\1\34\1\0\3\34\7\0\1\155\3\34\1\0\2\34" +
      "\3\0\2\34\1\0\11\34\1\0\1\34\6\0\5\34" +
      "\1\u0190\17\34\11\0\2\34\6\0\12\34\2\0\1\34" +
      "\1\0\3\34\7\0\1\155\3\34\1\0\2\34\3\0" +
      "\2\34\1\0\11\34\1\0\1\34\6\0\17\34\1\u0191" +
      "\5\34\11\0\2\34\6\0\12\34\2\0\1\34\1\0" +
      "\3\34\7\0\1\155\3\34\1\0\2\34\3\0\2\34" +
      "\1\0\11\34\1\0\1\34\6\0\20\34\1\u0192\4\34" +
      "\11\0\2\34\6\0\12\34\2\0\1\34\1\0\3\34" +
      "\7\0\1\155\3\34\1\0\2\34\3\0\2\34\1\0" +
      "\11\34\1\0\1\34\6\0\17\34\1\u0193\5\34\11\0" +
      "\2\34\6\0\12\34\2\0\1\34\1\0\3\34\7\0" +
      "\1\155\3\34\1\0\2\34\3\0\2\34\1\0\11\34" +
      "\1\0\1\34\6\0\5\34\1\u0194\17\34\11\0\2\34" +
      "\6\0\12\34\21\0\1\u0183\2\0\1\u0146\3\0\2\u0183" +
      "\4\0\1\u018f\1\u0146\1\0\1\u0183\1\0\1\u0183\1\u011c" +
      "\63\0\3\u0183\3\0\1\34\1\0\3\34\7\0\1\155" +
      "\3\34\1\0\2\34\3\0\2\34\1\0\11\34\1\0" +
      "\1\34\6\0\5\34\1\u0195\17\34\11\0\2\34\6\0" +
      "\12\34\1\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[25392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\1\1\1\11\3\1\1\11\5\1\1\11" +
      "\14\1\5\11\22\1\3\11\4\1\1\11\17\1\1\11" +
      "\4\1\1\11\5\1\2\11\1\1\1\11\1\1\2\11" +
      "\1\1\4\11\3\1\2\11\1\1\1\11\1\0\1\11" +
      "\4\1\1\11\3\1\4\0\1\11\1\1\1\11\4\0" +
      "\4\11\3\1\1\11\5\1\6\11\2\1\1\11\4\1" +
      "\2\11\32\1\3\11\1\1\1\11\1\1\7\11\1\1" +
      "\3\11\2\1\2\0\1\11\1\1\2\11\2\1\2\0" +
      "\2\11\2\0\1\11\2\1\1\11\1\0\1\1\1\11" +
      "\1\0\3\1\1\0\1\11\37\1\2\11\1\1\1\11" +
      "\1\1\3\0\1\11\1\1\1\0\3\1\1\0\2\1" +
      "\1\0\1\1\1\11\32\1\1\11\2\1\1\0\1\11" +
      "\2\1\2\0\1\1\1\0\2\1\2\0\33\1\1\11" +
      "\1\1\1\0\20\1\3\0\12\1\4\0\10\1\1\0" +
      "\6\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * the input device
   */
  private final java.io.Reader zzReader;

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  /* user code: */
  private static final IntStack stateStack = new IntStack();
  private static final IntStack leftBracketStack = new IntStack();
  private static int leftBraceCount = 0;
  private static boolean noInAndUnion = false;

  /**
   * 虎哥化
   */
  private void hugify(int state) {
    stateStack.push(yystate());
    leftBracketStack.push(leftBraceCount);
    leftBraceCount = 0;
    yybegin(state);
  }

  /**
   * 去虎哥化
   */
  private void dehugify() {
    leftBraceCount = leftBracketStack.pop();
    yybegin(stateStack.pop());
  }

  /**
   * 重新虎哥化
   */
  private void rehugify(int state) {
    dehugify();
    hugify(state);
  }

  private static void init() {
    leftBraceCount = 0;
    noInAndUnion = false;
    while (!stateStack.empty()) stateStack.pop();
    while (!leftBracketStack.empty()) leftBracketStack.pop();
  }

  public JuliaLexer() {
    this(null);
    init();
  }


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  JuliaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      init();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   */
  public IElementType advance() {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return TokenType.BAD_CHARACTER;
          }
          // fall through
          case 152:
            break;
          case 2: {
            return JuliaTypes.MISC_COMPARISON_SYM;
          }
          // fall through
          case 153:
            break;
          case 3: {
            return JuliaTypes.MISC_PLUS_SYM;
          }
          // fall through
          case 154:
            break;
          case 4: {
            return JuliaTypes.MISC_MULTIPLY_SYM;
          }
          // fall through
          case 155:
            break;
          case 5: {
            return JuliaTypes.MISC_EXPONENT_SYM;
          }
          // fall through
          case 156:
            break;
          case 6: {
            return JuliaTypes.MISC_ARROW_SYM;
          }
          // fall through
          case 157:
            break;
          case 7: {
            return TokenType.WHITE_SPACE;
          }
          // fall through
          case 158:
            break;
          case 8: {
            noInAndUnion = false;
            return JuliaTypes.EOL;
          }
          // fall through
          case 159:
            break;
          case 9: {
            return JuliaTypes.EQ_SYM;
          }
          // fall through
          case 160:
            break;
          case 10: {
            hugify(STRING_TEMPLATE);
            return JuliaTypes.QUOTE_START;
          }
          // fall through
          case 161:
            break;
          case 11: {
            return JuliaTypes.INTERPOLATE_SYM;
          }
          // fall through
          case 162:
            break;
          case 12: {
            return JuliaTypes.LEFT_BRACKET;
          }
          // fall through
          case 163:
            break;
          case 13: {
            return JuliaTypes.NOT_SYM;
          }
          // fall through
          case 164:
            break;
          case 14: {
            hugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.SYM;
          }
          // fall through
          case 165:
            break;
          case 15: {
            return JuliaTypes.INVERSE_DIV_SYM;
          }
          // fall through
          case 166:
            break;
          case 16: {
            return JuliaTypes.TRANSPOSE_SYM;
          }
          // fall through
          case 167:
            break;
          case 17: {
            hugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.INT_LITERAL;
          }
          // fall through
          case 168:
            break;
          case 18: {
            return JuliaTypes.MINUS_SYM;
          }
          // fall through
          case 169:
            break;
          case 19: {
            return JuliaTypes.DOT_SYM;
          }
          // fall through
          case 170:
            break;
          case 20: {
            return JuliaTypes.LEFT_M_BRACKET;
          }
          // fall through
          case 171:
            break;
          case 21: {
            return JuliaTypes.RIGHT_M_BRACKET;
          }
          // fall through
          case 172:
            break;
          case 22: {
            return JuliaTypes.LEFT_B_BRACKET;
          }
          // fall through
          case 173:
            break;
          case 23: {
            return JuliaTypes.RIGHT_B_BRACKET;
          }
          // fall through
          case 174:
            break;
          case 24: {
            return JuliaTypes.RIGHT_BRACKET;
          }
          // fall through
          case 175:
            break;
          case 25: {
            hugify(AFTER_COLON);
            return JuliaTypes.COLON_SYM;
          }
          // fall through
          case 176:
            break;
          case 26: {
            return JuliaTypes.SEMICOLON_SYM;
          }
          // fall through
          case 177:
            break;
          case 27: {
            return JuliaTypes.COMMA_SYM;
          }
          // fall through
          case 178:
            break;
          case 28: {
            return JuliaTypes.QUESTION_SYM;
          }
          // fall through
          case 179:
            break;
          case 29: {
            return JuliaTypes.LESS_THAN_SYM;
          }
          // fall through
          case 180:
            break;
          case 30: {
            return JuliaTypes.GREATER_THAN_SYM;
          }
          // fall through
          case 181:
            break;
          case 31: {
            return JuliaTypes.BITWISE_AND_SYM;
          }
          // fall through
          case 182:
            break;
          case 32: {
            return JuliaTypes.BITWISE_OR_SYM;
          }
          // fall through
          case 183:
            break;
          case 33: {
            return JuliaTypes.BITWISE_NOT_SYM;
          }
          // fall through
          case 184:
            break;
          case 34: {
            return JuliaTypes.IS_SYM;
          }
          // fall through
          case 185:
            break;
          case 35: {
            return JuliaTypes.ISNT_SYM;
          }
          // fall through
          case 186:
            break;
          case 36: {
            return JuliaTypes.REMAINDER_SYM;
          }
          // fall through
          case 187:
            break;
          case 37: {
            return JuliaTypes.DIVIDE_SYM;
          }
          // fall through
          case 188:
            break;
          case 38: {
            return JuliaTypes.EXPONENT_SYM;
          }
          // fall through
          case 189:
            break;
          case 39: {
            return JuliaTypes.MULTIPLY_SYM;
          }
          // fall through
          case 190:
            break;
          case 40: {
            return JuliaTypes.PLUS_SYM;
          }
          // fall through
          case 191:
            break;
          case 41: {
            return JuliaTypes.UNEQUAL_SYM;
          }
          // fall through
          case 192:
            break;
          case 42: {
            return JuliaTypes.GREATER_THAN_OR_EQUAL_SYM;
          }
          // fall through
          case 193:
            break;
          case 43: {
            return JuliaTypes.LESS_THAN_OR_EQUAL_SYM;
          }
          // fall through
          case 194:
            break;
          case 44: {
            return JuliaTypes.BITWISE_XOR_SYM;
          }
          // fall through
          case 195:
            break;
          case 45: {
            return JuliaTypes.IN_SYM;
          }
          // fall through
          case 196:
            break;
          case 46: {
            hugify(CMD_STRING_TEMPLATE);
            return JuliaTypes.CMD_QUOTE_START;
          }
          // fall through
          case 197:
            break;
          case 47: {
            return JuliaTypes.BLOCK_COMMENT_BODY;
          }
          // fall through
          case 198:
            break;
          case 48: {
            return JuliaTypes.REGULAR_STRING_PART_LITERAL;
          }
          // fall through
          case 199:
            break;
          case 49: {
            rehugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.QUOTE_END;
          }
          // fall through
          case 200:
            break;
          case 50: {
            return JuliaTypes.SHORT_INTERPOLATE_SYM;
          }
          // fall through
          case 201:
            break;
          case 51: {
            dehugify();
            return JuliaTypes.SYM;
          }
          // fall through
          case 202:
            break;
          case 52: {
            leftBraceCount++;
            return JuliaTypes.LEFT_BRACKET;
          }
          // fall through
          case 203:
            break;
          case 53: {
            if (leftBraceCount == 0) {
              dehugify();
              return JuliaTypes.STRING_INTERPOLATE_END;
            }
            leftBraceCount--;
            return JuliaTypes.RIGHT_BRACKET;
          }
          // fall through
          case 204:
            break;
          case 54: {
            rehugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.CMD_QUOTE_END;
          }
          // fall through
          case 205:
            break;
          case 55: {
            dehugify();
            return JuliaTypes.REGEX_END;
          }
          // fall through
          case 206:
            break;
          case 56: {
            dehugify();
            return JuliaTypes.RAW_STR_END;
          }
          // fall through
          case 207:
            break;
          case 57: {
            dehugify();
            return JuliaTypes.BYTE_ARRAY_END;
          }
          // fall through
          case 208:
            break;
          case 58: {
            dehugify();
            return JuliaTypes.VERSION_END;
          }
          // fall through
          case 209:
            break;
          case 59: {
            dehugify();
            yypushback(1);
          }
          // fall through
          case 210:
            break;
          case 60: {
            dehugify();
            yypushback(1);
            return JuliaTypes.IMPLICIT_MULTIPLY_SYM;
          }
          // fall through
          case 211:
            break;
          case 61: {
            return JuliaTypes.LINE_COMMENT;
          }
          // fall through
          case 212:
            break;
          case 62: {
            hugify(NESTED_COMMENT);
            return JuliaTypes.BLOCK_COMMENT_START;
          }
          // fall through
          case 213:
            break;
          case 63: {
            return JuliaTypes.EQUALS_SYM;
          }
          // fall through
          case 214:
            break;
          case 64: {
            return JuliaTypes.ARROW_SYM;
          }
          // fall through
          case 215:
            break;
          case 65: {
            return JuliaTypes.BITWISE_XOR_ASSIGN_SYM;
          }
          // fall through
          case 216:
            break;
          case 66: {
            hugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.FLOAT_LITERAL;
          }
          // fall through
          case 217:
            break;
          case 67: {
            return JuliaTypes.INVERSE_DIV_ASSIGN_SYM;
          }
          // fall through
          case 218:
            break;
          case 68: {
            return JuliaTypes.FACTORISE_SYM;
          }
          // fall through
          case 219:
            break;
          case 69: {
            return JuliaTypes.MINUS_ASSIGN_SYM;
          }
          // fall through
          case 220:
            break;
          case 70: {
            return JuliaTypes.SPECIAL_ARROW_SYM;
          }
          // fall through
          case 221:
            break;
          case 71: {
            return JuliaTypes.LAMBDA_ABSTRACTION;
          }
          // fall through
          case 222:
            break;
          case 72: {
            return JuliaTypes.ASSIGN_SYM;
          }
          // fall through
          case 223:
            break;
          case 73: {
            return JuliaTypes.DOUBLE_DOT_SYM;
          }
          // fall through
          case 224:
            break;
          case 74: {
            return JuliaTypes.MACRO_SYM;
          }
          // fall through
          case 225:
            break;
          case 75: {
            hugify(INSIDE_REGEX);
            return JuliaTypes.REGEX_START;
          }
          // fall through
          case 226:
            break;
          case 76: {
            hugify(INSIDE_VERSION);
            return JuliaTypes.VERSION_START;
          }
          // fall through
          case 227:
            break;
          case 77: {
            hugify(INSIDE_BYTE_ARRAY);
            return JuliaTypes.BYTE_ARRAY_START;
          }
          // fall through
          case 228:
            break;
          case 78: {
            return JuliaTypes.DO_KEYWORD;
          }
          // fall through
          case 229:
            break;
          case 79: {
            return noInAndUnion ? JuliaTypes.SYM : JuliaTypes.IN_KEYWORD;
          }
          // fall through
          case 230:
            break;
          case 80: {
            return JuliaTypes.IF_KEYWORD;
          }
          // fall through
          case 231:
            break;
          case 81: {
            return JuliaTypes.COLON_ASSIGN_SYM;
          }
          // fall through
          case 232:
            break;
          case 82: {
            return JuliaTypes.DOUBLE_COLON;
          }
          // fall through
          case 233:
            break;
          case 83: {
            return JuliaTypes.SUBTYPE_SYM;
          }
          // fall through
          case 234:
            break;
          case 84: {
            return JuliaTypes.SHL_SYM;
          }
          // fall through
          case 235:
            break;
          case 85: {
            return JuliaTypes.INVERSE_PIPE_SYM;
          }
          // fall through
          case 236:
            break;
          case 86: {
            return JuliaTypes.SHR_SYM;
          }
          // fall through
          case 237:
            break;
          case 87: {
            return JuliaTypes.BITWISE_AND_ASSIGN_SYM;
          }
          // fall through
          case 238:
            break;
          case 88: {
            return JuliaTypes.AND_SYM;
          }
          // fall through
          case 239:
            break;
          case 89: {
            return JuliaTypes.BITWISE_OR_ASSIGN_SYM;
          }
          // fall through
          case 240:
            break;
          case 90: {
            return JuliaTypes.PIPE_SYM;
          }
          // fall through
          case 241:
            break;
          case 91: {
            return JuliaTypes.OR_SYM;
          }
          // fall through
          case 242:
            break;
          case 92: {
            return JuliaTypes.REMAINDER_ASSIGN_SYM;
          }
          // fall through
          case 243:
            break;
          case 93: {
            return JuliaTypes.DIVIDE_ASSIGN_SYM;
          }
          // fall through
          case 244:
            break;
          case 94: {
            return JuliaTypes.FRACTION_SYM;
          }
          // fall through
          case 245:
            break;
          case 95: {
            return JuliaTypes.EXPONENT_ASSIGN_SYM;
          }
          // fall through
          case 246:
            break;
          case 96: {
            return JuliaTypes.MULTIPLY_ASSIGN_SYM;
          }
          // fall through
          case 247:
            break;
          case 97: {
            return JuliaTypes.PLUS_ASSIGN_SYM;
          }
          // fall through
          case 248:
            break;
          case 98: {
            dehugify();
            return JuliaTypes.BLOCK_COMMENT_END;
          }
          // fall through
          case 249:
            break;
          case 99: {
            hugify(SHORT_TEMPLATE);
            yypushback(yylength() - 1);
            return JuliaTypes.SHORT_INTERPOLATE_SYM;
          }
          // fall through
          case 250:
            break;
          case 100: {
            hugify(LONG_TEMPLATE);
            return JuliaTypes.STRING_INTERPOLATE_START;
          }
          // fall through
          case 251:
            break;
          case 101: {
            return JuliaTypes.STRING_ESCAPE;
          }
          // fall through
          case 252:
            break;
          case 102:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
          {
            yypushback(1);
            hugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.SYM;
          }
          // fall through
          case 253:
            break;
          case 103: {
            hugify(RAW_STRING_TEMPLATE);
            return JuliaTypes.TRIPLE_QUOTE_START;
          }
          // fall through
          case 254:
            break;
          case 104: {
            return JuliaTypes.FACTORISE_ASSIGN_SYM;
          }
          // fall through
          case 255:
            break;
          case 105: { // hugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.CHAR_LITERAL;
          }
          // fall through
          case 256:
            break;
          case 106: {
            return JuliaTypes.SLICE_SYM;
          }
          // fall through
          case 257:
            break;
          case 107: {
            return JuliaTypes.END_KEYWORD;
          }
          // fall through
          case 258:
            break;
          case 108: {
            return JuliaTypes.TRY_KEYWORD;
          }
          // fall through
          case 259:
            break;
          case 109: {
            return JuliaTypes.FOR_KEYWORD;
          }
          // fall through
          case 260:
            break;
          case 110: {
            return JuliaTypes.LET_KEYWORD;
          }
          // fall through
          case 261:
            break;
          case 111: {
            return JuliaTypes.SHL_ASSIGN_SYM;
          }
          // fall through
          case 262:
            break;
          case 112: {
            return JuliaTypes.SHR_ASSIGN_SYM;
          }
          // fall through
          case 263:
            break;
          case 113: {
            return JuliaTypes.USHR_SYM;
          }
          // fall through
          case 264:
            break;
          case 114: {
            return JuliaTypes.FRACTION_ASSIGN_SYM;
          }
          // fall through
          case 265:
            break;
          case 115: { // hugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.FLOAT_CONSTANT;
          }
          // fall through
          case 266:
            break;
          case 116: {
            rehugify(AFTER_SIMPLE_LIT);
            return JuliaTypes.TRIPLE_QUOTE_END;
          }
          // fall through
          case 267:
            break;
          case 117: {
            hugify(INSIDE_RAW_STR);
            return JuliaTypes.RAW_STR_START;
          }
          // fall through
          case 268:
            break;
          case 118: {
            return JuliaTypes.ELSE_KEYWORD;
          }
          // fall through
          case 269:
            break;
          case 119: {
            return JuliaTypes.TRUE_KEYWORD;
          }
          // fall through
          case 270:
            break;
          case 120: {
            return JuliaTypes.TYPE_KEYWORD;
          }
          // fall through
          case 271:
            break;
          case 121: {
            return JuliaTypes.USHR_ASSIGN_SYM;
          }
          // fall through
          case 272:
            break;
          case 122: {
            return JuliaTypes.STRING_UNICODE;
          }
          // fall through
          case 273:
            break;
          case 123: {
            return noInAndUnion ? JuliaTypes.SYM : JuliaTypes.UNION_KEYWORD;
          }
          // fall through
          case 274:
            break;
          case 124: {
            return JuliaTypes.USING_KEYWORD;
          }
          // fall through
          case 275:
            break;
          case 125: {
            return JuliaTypes.WHERE_KEYWORD;
          }
          // fall through
          case 276:
            break;
          case 126: {
            return JuliaTypes.WHILE_KEYWORD;
          }
          // fall through
          case 277:
            break;
          case 127: {
            return JuliaTypes.BREAK_KEYWORD;
          }
          // fall through
          case 278:
            break;
          case 128: {
            return JuliaTypes.BEGIN_KEYWORD;
          }
          // fall through
          case 279:
            break;
          case 129: {
            return JuliaTypes.CATCH_KEYWORD;
          }
          // fall through
          case 280:
            break;
          case 130: {
            return JuliaTypes.CONST_KEYWORD;
          }
          // fall through
          case 281:
            break;
          case 131: {
            return JuliaTypes.FALSE_KEYWORD;
          }
          // fall through
          case 282:
            break;
          case 132: {
            return JuliaTypes.LOCAL_KEYWORD;
          }
          // fall through
          case 283:
            break;
          case 133: {
            return JuliaTypes.MACRO_KEYWORD;
          }
          // fall through
          case 284:
            break;
          case 134: {
            return JuliaTypes.QUOTE_KEYWORD;
          }
          // fall through
          case 285:
            break;
          case 135: {
            return JuliaTypes.RETURN_KEYWORD;
          }
          // fall through
          case 286:
            break;
          case 136: {
            return JuliaTypes.EXPORT_KEYWORD;
          }
          // fall through
          case 287:
            break;
          case 137: {
            return JuliaTypes.ELSEIF_KEYWORD;
          }
          // fall through
          case 288:
            break;
          case 138: {
            noInAndUnion = true;
            return JuliaTypes.IMPORT_KEYWORD;
          }
          // fall through
          case 289:
            break;
          case 139: {
            return JuliaTypes.STRUCT_KEYWORD;
          }
          // fall through
          case 290:
            break;
          case 140: {
            return JuliaTypes.MODULE_KEYWORD;
          }
          // fall through
          case 291:
            break;
          case 141: {
            return JuliaTypes.GLOBAL_KEYWORD;
          }
          // fall through
          case 292:
            break;
          case 142: {
            return JuliaTypes.FINALLY_KEYWORD;
          }
          // fall through
          case 293:
            break;
          case 143: {
            return JuliaTypes.MUTABLE_KEYWORD;
          }
          // fall through
          case 294:
            break;
          case 144: {
            return JuliaTypes.ABSTRACT_KEYWORD;
          }
          // fall through
          case 295:
            break;
          case 145: {
            return JuliaTypes.CONTINUE_KEYWORD;
          }
          // fall through
          case 296:
            break;
          case 146: {
            return JuliaTypes.FUNCTION_KEYWORD;
          }
          // fall through
          case 297:
            break;
          case 147: {
            return JuliaTypes.PRIMITIVE_KEYWORD;
          }
          // fall through
          case 298:
            break;
          case 148: {
            return JuliaTypes.TYPEALIAS_KEYWORD;
          }
          // fall through
          case 299:
            break;
          case 149: {
            noInAndUnion = true;
            return JuliaTypes.IMPORTALL_KEYWORD;
          }
          // fall through
          case 300:
            break;
          case 150: {
            return JuliaTypes.IMMUTABLE_KEYWORD;
          }
          // fall through
          case 301:
            break;
          case 151: {
            return JuliaTypes.BAREMODULE_KEYWORD;
          }
          // fall through
          case 302:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}